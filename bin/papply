#!/bin/bash
set -u
RUBYLIB=/usr/lib/ruby
PUPPETDIR=/var/puppet/
runstatus=0
verbose=0
poptions=''
debug=0
local=0
zabbix_alert=0

function usage() {

  printf "Usage: $0 [-v] [-d] [-z] [-e <environment> ] [ -r <role> ]\n\n-v\tVerbose\n-d\tDebug\n-r <role>\tserver Role\n-z\tSend alert to zabbix\n-e <environment>\tSystem Environment\n"
  exit 100
}

while getopts "e:r:dvz" OPTION; do
  case "${OPTION}" in
    e)
      export FACTER_env=$OPTARG
      ;;
    r)
      export FACTER_role=$OPTARG
      ;;
    v)
      poptions="$poptions --verbose"
      ;;
    d)
      poptions="$poptions --debug"
      ;;
    l)
      local=1
      ;;
    z)
      zabbix_alert=1
      ;;
    *)
      usage
      ;;
  esac
done
echo "`date`|INFO|puppet apply started"

puppet apply  $poptions  --modulepath ${PUPPETDIR}/modules --hiera_config=${PUPPETDIR}/hiera/hiera.yaml ${PUPPETDIR}/manifests/site.pp; rv_papply=$?
if [ $rv_papply -ne 0 ]; then
  runstatus=1
  echo "`date`|ERROR|Puppet Apply Failed"
fi

if [ $zabbix_alert -eq 1 ]; then
  echo "`date`|INFO|Alerting zabbix"
  /usr/bin/zabbix_sender  -s `hostname` -z $zabbix_server -k ztrapper.puppet.run.status -o $runstatus; rv_zsender=$?
else
  rv_zsender=0
fi
if [ $rv_zsender -ne 0 ]; then
   echo "`date`|ERROR|Failed Zabbix Sender to send zabbix alert"
elif [ $runstatus -eq 0 ]; then
   echo "`date`|INFO|Puppet apply completed successfully"
fi
